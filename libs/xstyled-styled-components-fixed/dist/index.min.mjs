import l,{createGlobalStyle as u,ThemeContext as y,ThemeProvider as f,css as g}from"styled-components";import{ServerStyleSheet as Be,StyleSheetManager as ve,ThemeConsumer as Fe,ThemeContext as Me,ThemeProvider as We,isStyledComponent as $e,keyframes as Ge,withTheme as ke}from"styled-components";import{createColorStyles as x,createColorModeProvider as C,createUseGetter as r,useThemeScreens as T,useThemeBreakpoint as b,useThemeUp as P,useThemeDown as w,createTransform as B}from"@xstyled/core";import{getColorModeInitScriptElement as Ie,getColorModeInitScriptTag as De,useColorMode as Ee,useViewportWidth as Ue}from"@xstyled/core";import{useContext as v}from"react";import{th as o,getPreflightStyles as F,system as M}from"@xstyled/system";export*from"@xstyled/system";import{flattenStrings as W,string as $}from"@xstyled/util";const G=u`${t=>x(t.theme,{targetSelector:t.targetSelector})}`,k=C({ThemeContext:y,ThemeProvider:f,ColorModeStyle:G}),e=()=>v(y),z=r(o,e),I=r(o.angle,e),D=r(o.animation,e),E=r(o.border,e),U=r(o.borderColor,e),j=r(o.borderStyle,e),A=r(o.borderWidth,e),H=r(o.color,e),L=r(o.duration,e),O=r(o.font,e),R=r(o.fontSize,e),V=r(o.fontWeight,e),X=r(o.inset,e),Z=r(o.letterSpacing,e),q=r(o.lineHeight,e),J=r(o.percent,e),K=r(o.px,e),N=r(o.radius,e),Q=r(o.ringWidth,e),Y=r(o.shadow,e),_=r(o.size,e),ee=r(o.space,e),te=r(o.timingFunction,e),re=r(o.transform,e),oe=r(o.transition,e),se=r(o.transitionProperty,e),ne=r(o.zIndex,e),ie=()=>T(e()),ae=()=>b(e()),ce=t=>P(e(),t),le=t=>w(e(),t),ue=u(({theme:t})=>F(t)),c=t=>{const n=B(t);return(...s)=>{const i=g(...s);return W(i).map(n)}},d=typeof l=="function"?l:l.default,m=(t,n,s)=>{const i=(...a)=>t`${n(...a)}${s}`;return i.attrs=a=>m(t.attrs(a),n,s),i.withConfig=a=>m(t.withConfig(a),n,s),i},de=t=>{const n=new Set(t.meta.props);return(s,i,a)=>$(s)&&n.has(s)?!1:typeof a=="string"?i(s):!0},h=(t,n)=>{const s=n?{shouldForwardProp:de(n)}:{};return i=>{const a=d(i);return m(s?a.withConfig(s):a,t,n)}},me=t=>{const n=c(t),s=h(n),i=h(n,t);return s.box=i("div"),Object.keys(d).forEach(a=>{s[a]=s(a),s[`${a}Box`]=i(a)}),s},he=t=>{const n=h(c(t),t),s={};return Object.keys(d).forEach(i=>{s[i]=n(i)``}),s},ye=t=>{const n=c(t);return(...s)=>u([n(...s)])},S=t=>({css:c(t),x:he(t),styled:me(t),createGlobalStyle:ye(t)}),{css:Se,styled:p,x:pe,createGlobalStyle:fe}=S(M);export{k as ColorModeProvider,ue as Preflight,Be as ServerStyleSheet,ve as StyleSheetManager,Fe as ThemeConsumer,Me as ThemeContext,We as ThemeProvider,S as createCss,fe as createGlobalStyle,Se as css,p as default,Ie as getColorModeInitScriptElement,De as getColorModeInitScriptTag,$e as isStyledComponent,Ge as keyframes,p as styled,I as useAngle,D as useAnimation,E as useBorder,U as useBorderColor,j as useBorderStyle,A as useBorderWidth,ae as useBreakpoint,H as useColor,Ee as useColorMode,le as useDown,L as useDuration,O as useFont,R as useFontSize,V as useFontWeight,X as useInset,Z as useLetterSpacing,q as useLineHeight,J as usePercent,K as usePx,N as useRadius,Q as useRingWidth,ie as useScreens,Y as useShadow,_ as useSize,ee as useSpace,z as useTh,e as useTheme,te as useTimingFunction,re as useTransform,oe as useTransition,se as useTransitionProperty,ce as useUp,Ue as useViewportWidth,ne as useZIndex,ke as withTheme,pe as x};
